// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Repository;

#nullable disable

namespace Repository.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Repository.Entities.AiChatMessage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SenderType")
                        .HasColumnType("int");

                    b.Property<long>("SessionId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("SessionId");

                    b.ToTable("AiChatMessages");
                });

            modelBuilder.Entity("Repository.Entities.AiChatSession", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("SessionId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("SessionId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("AiChatSessions");
                });

            modelBuilder.Entity("Repository.Entities.AppSetting", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("KeyName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("KeyName")
                        .IsUnique();

                    b.ToTable("AppSettings");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedAt = new DateTime(2025, 8, 6, 6, 22, 44, 706, DateTimeKind.Utc).AddTicks(6344),
                            Description = "Số lần swipe tối đa mỗi ngày",
                            KeyName = "max_swipes_per_day",
                            UpdatedAt = new DateTime(2025, 8, 6, 6, 22, 44, 706, DateTimeKind.Utc).AddTicks(6344),
                            Value = "50"
                        },
                        new
                        {
                            Id = 2L,
                            CreatedAt = new DateTime(2025, 8, 6, 6, 22, 44, 706, DateTimeKind.Utc).AddTicks(6346),
                            Description = "Rating tối thiểu để hiển thị gia sư",
                            KeyName = "min_tutor_rating",
                            UpdatedAt = new DateTime(2025, 8, 6, 6, 22, 44, 706, DateTimeKind.Utc).AddTicks(6346),
                            Value = "3.0"
                        },
                        new
                        {
                            Id = 3L,
                            CreatedAt = new DateTime(2025, 8, 6, 6, 22, 44, 706, DateTimeKind.Utc).AddTicks(6348),
                            Description = "Số lần super like mỗi ngày",
                            KeyName = "super_like_limit",
                            UpdatedAt = new DateTime(2025, 8, 6, 6, 22, 44, 706, DateTimeKind.Utc).AddTicks(6348),
                            Value = "5"
                        },
                        new
                        {
                            Id = 4L,
                            CreatedAt = new DateTime(2025, 8, 6, 6, 22, 44, 706, DateTimeKind.Utc).AddTicks(6349),
                            Description = "Bật/tắt tính năng chat AI",
                            KeyName = "chat_ai_enabled",
                            UpdatedAt = new DateTime(2025, 8, 6, 6, 22, 44, 706, DateTimeKind.Utc).AddTicks(6349),
                            Value = "true"
                        });
                });

            modelBuilder.Entity("Repository.Entities.Booking", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LocationAddress")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("LocationType")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<long>("StudentId")
                        .HasColumnType("bigint");

                    b.Property<long>("SubjectId")
                        .HasColumnType("bigint");

                    b.Property<decimal?>("TotalAmount")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<long>("TutorId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Status");

                    b.HasIndex("SubjectId");

                    b.HasIndex("StudentId", "Status");

                    b.HasIndex("TutorId", "StartTime");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("Repository.Entities.Certification", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CertificateUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("IssueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Issuer")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<long>("TutorId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("TutorId");

                    b.ToTable("Certifications");
                });

            modelBuilder.Entity("Repository.Entities.Conversation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastMessageAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastMessageId")
                        .HasColumnType("bigint");

                    b.Property<long>("MatchId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("LastMessageId");

                    b.HasIndex("MatchId");

                    b.ToTable("Conversations");
                });

            modelBuilder.Entity("Repository.Entities.Match", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastActivity")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("MatchedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<long>("StudentId")
                        .HasColumnType("bigint");

                    b.Property<long>("TutorId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.HasIndex("TutorId");

                    b.HasIndex("StudentId", "TutorId")
                        .IsUnique();

                    b.ToTable("Matches");
                });

            modelBuilder.Entity("Repository.Entities.Message", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ConversationId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<int>("MessageType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ReadAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("SenderId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("SenderId");

                    b.HasIndex("ConversationId", "CreatedAt");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("Repository.Entities.Notification", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ReadAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId", "IsRead", "CreatedAt");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("Repository.Entities.PayOSWebhook", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Payload")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("PayOSWebhooks");
                });

            modelBuilder.Entity("Repository.Entities.PaymentTransaction", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("PaidAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("PayOSResponse")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PayOSTransactionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QRCodeUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("OrderCode")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("PaymentTransactions");
                });

            modelBuilder.Entity("Repository.Entities.Review", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsAnonymous")
                        .HasColumnType("bit");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<int>("Rating")
                        .HasColumnType("int")
                        .HasAnnotation("Range", new[] { 1, 5 });

                    b.Property<long>("StudentId")
                        .HasColumnType("bigint");

                    b.Property<long>("TutorId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.HasIndex("TutorId", "CreatedAt");

                    b.HasIndex("TutorId", "StudentId")
                        .IsUnique();

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("Repository.Entities.Student", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<decimal?>("BudgetMax")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal?>("BudgetMin")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("GradeLevel")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LearningGoals")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LearningStyle")
                        .HasColumnType("int");

                    b.Property<string>("PreferredSchedule")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SchoolName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Students");
                });

            modelBuilder.Entity("Repository.Entities.Subject", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Category")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Icon")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasFilter("[Code] IS NOT NULL");

                    b.ToTable("Subjects");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Category = "Khoa học tự nhiên",
                            Code = "MATH",
                            CreatedAt = new DateTime(2025, 8, 6, 6, 22, 44, 706, DateTimeKind.Utc).AddTicks(6243),
                            IsActive = true,
                            Name = "Toán học",
                            UpdatedAt = new DateTime(2025, 8, 6, 6, 22, 44, 706, DateTimeKind.Utc).AddTicks(6244)
                        },
                        new
                        {
                            Id = 2L,
                            Category = "Khoa học tự nhiên",
                            Code = "PHYSICS",
                            CreatedAt = new DateTime(2025, 8, 6, 6, 22, 44, 706, DateTimeKind.Utc).AddTicks(6246),
                            IsActive = true,
                            Name = "Vật lý",
                            UpdatedAt = new DateTime(2025, 8, 6, 6, 22, 44, 706, DateTimeKind.Utc).AddTicks(6246)
                        },
                        new
                        {
                            Id = 3L,
                            Category = "Khoa học tự nhiên",
                            Code = "CHEMISTRY",
                            CreatedAt = new DateTime(2025, 8, 6, 6, 22, 44, 706, DateTimeKind.Utc).AddTicks(6247),
                            IsActive = true,
                            Name = "Hóa học",
                            UpdatedAt = new DateTime(2025, 8, 6, 6, 22, 44, 706, DateTimeKind.Utc).AddTicks(6248)
                        },
                        new
                        {
                            Id = 4L,
                            Category = "Khoa học tự nhiên",
                            Code = "BIOLOGY",
                            CreatedAt = new DateTime(2025, 8, 6, 6, 22, 44, 706, DateTimeKind.Utc).AddTicks(6249),
                            IsActive = true,
                            Name = "Sinh học",
                            UpdatedAt = new DateTime(2025, 8, 6, 6, 22, 44, 706, DateTimeKind.Utc).AddTicks(6250)
                        },
                        new
                        {
                            Id = 5L,
                            Category = "Khoa học xã hội",
                            Code = "LITERATURE",
                            CreatedAt = new DateTime(2025, 8, 6, 6, 22, 44, 706, DateTimeKind.Utc).AddTicks(6251),
                            IsActive = true,
                            Name = "Văn học",
                            UpdatedAt = new DateTime(2025, 8, 6, 6, 22, 44, 706, DateTimeKind.Utc).AddTicks(6251)
                        },
                        new
                        {
                            Id = 6L,
                            Category = "Ngoại ngữ",
                            Code = "ENGLISH",
                            CreatedAt = new DateTime(2025, 8, 6, 6, 22, 44, 706, DateTimeKind.Utc).AddTicks(6253),
                            IsActive = true,
                            Name = "Tiếng Anh",
                            UpdatedAt = new DateTime(2025, 8, 6, 6, 22, 44, 706, DateTimeKind.Utc).AddTicks(6253)
                        },
                        new
                        {
                            Id = 7L,
                            Category = "Khoa học xã hội",
                            Code = "HISTORY",
                            CreatedAt = new DateTime(2025, 8, 6, 6, 22, 44, 706, DateTimeKind.Utc).AddTicks(6254),
                            IsActive = true,
                            Name = "Lịch sử",
                            UpdatedAt = new DateTime(2025, 8, 6, 6, 22, 44, 706, DateTimeKind.Utc).AddTicks(6254)
                        },
                        new
                        {
                            Id = 8L,
                            Category = "Khoa học xã hội",
                            Code = "GEOGRAPHY",
                            CreatedAt = new DateTime(2025, 8, 6, 6, 22, 44, 706, DateTimeKind.Utc).AddTicks(6256),
                            IsActive = true,
                            Name = "Địa lý",
                            UpdatedAt = new DateTime(2025, 8, 6, 6, 22, 44, 706, DateTimeKind.Utc).AddTicks(6256)
                        });
                });

            modelBuilder.Entity("Repository.Entities.SwipeAction", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("Action")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("StudentId")
                        .HasColumnType("bigint");

                    b.Property<long>("TutorId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.HasIndex("TutorId");

                    b.HasIndex("StudentId", "TutorId")
                        .IsUnique();

                    b.ToTable("SwipeActions");
                });

            modelBuilder.Entity("Repository.Entities.Tutor", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Availability")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("AverageRating")
                        .HasPrecision(3, 2)
                        .HasColumnType("decimal(3,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("EducationLevel")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("ExperienceYears")
                        .HasColumnType("int");

                    b.Property<int?>("GraduationYear")
                        .HasColumnType("int");

                    b.Property<decimal?>("HourlyRate")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("Introduction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsFeatured")
                        .HasColumnType("bit");

                    b.Property<string>("Major")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("TeachingStyle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TotalReviews")
                        .HasColumnType("int");

                    b.Property<int>("TotalStudentsTaught")
                        .HasColumnType("int");

                    b.Property<string>("University")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<int>("VerificationStatus")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AverageRating");

                    b.HasIndex("HourlyRate");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Tutors");
                });

            modelBuilder.Entity("Repository.Entities.TutorSubject", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProficiencyLevel")
                        .HasColumnType("int");

                    b.Property<long>("SubjectId")
                        .HasColumnType("bigint");

                    b.Property<long>("TutorId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("YearsExperience")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SubjectId");

                    b.HasIndex("TutorId", "SubjectId")
                        .IsUnique();

                    b.ToTable("TutorSubjects");
                });

            modelBuilder.Entity("Repository.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Bio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("District")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("Gender")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("bit");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ProfileImage")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("Role")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Role");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Repository.Entities.Wallet", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<decimal>("Balance")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Wallets");
                });

            modelBuilder.Entity("Repository.Entities.AiChatMessage", b =>
                {
                    b.HasOne("Repository.Entities.AiChatSession", "Session")
                        .WithMany("AiChatMessages")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Session");
                });

            modelBuilder.Entity("Repository.Entities.AiChatSession", b =>
                {
                    b.HasOne("Repository.Entities.User", "User")
                        .WithMany("AiChatSessions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Repository.Entities.Booking", b =>
                {
                    b.HasOne("Repository.Entities.Student", "Student")
                        .WithMany("BookingsAsStudent")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Repository.Entities.Subject", "Subject")
                        .WithMany("Bookings")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Repository.Entities.Tutor", "Tutor")
                        .WithMany("BookingsAsTutor")
                        .HasForeignKey("TutorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Student");

                    b.Navigation("Subject");

                    b.Navigation("Tutor");
                });

            modelBuilder.Entity("Repository.Entities.Certification", b =>
                {
                    b.HasOne("Repository.Entities.Tutor", "Tutor")
                        .WithMany("Certifications")
                        .HasForeignKey("TutorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tutor");
                });

            modelBuilder.Entity("Repository.Entities.Conversation", b =>
                {
                    b.HasOne("Repository.Entities.Match", "Match")
                        .WithMany("Conversations")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Match");
                });

            modelBuilder.Entity("Repository.Entities.Match", b =>
                {
                    b.HasOne("Repository.Entities.Student", "Student")
                        .WithMany("MatchesAsStudent")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Repository.Entities.Tutor", "Tutor")
                        .WithMany("MatchesAsTutor")
                        .HasForeignKey("TutorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Student");

                    b.Navigation("Tutor");
                });

            modelBuilder.Entity("Repository.Entities.Message", b =>
                {
                    b.HasOne("Repository.Entities.Conversation", "Conversation")
                        .WithMany("Messages")
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Repository.Entities.User", "Sender")
                        .WithMany("Messages")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Conversation");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Repository.Entities.Notification", b =>
                {
                    b.HasOne("Repository.Entities.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Repository.Entities.PaymentTransaction", b =>
                {
                    b.HasOne("Repository.Entities.User", "User")
                        .WithMany("PaymentTransactions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Repository.Entities.Review", b =>
                {
                    b.HasOne("Repository.Entities.Student", "Student")
                        .WithMany("Reviews")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Repository.Entities.Tutor", "Tutor")
                        .WithMany("ReviewsReceived")
                        .HasForeignKey("TutorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");

                    b.Navigation("Tutor");
                });

            modelBuilder.Entity("Repository.Entities.Student", b =>
                {
                    b.HasOne("Repository.Entities.User", "User")
                        .WithOne("Student")
                        .HasForeignKey("Repository.Entities.Student", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Repository.Entities.SwipeAction", b =>
                {
                    b.HasOne("Repository.Entities.Student", "Student")
                        .WithMany("SwipeActions")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Repository.Entities.Tutor", "Tutor")
                        .WithMany()
                        .HasForeignKey("TutorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Student");

                    b.Navigation("Tutor");
                });

            modelBuilder.Entity("Repository.Entities.Tutor", b =>
                {
                    b.HasOne("Repository.Entities.User", "User")
                        .WithOne("Tutor")
                        .HasForeignKey("Repository.Entities.Tutor", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Repository.Entities.TutorSubject", b =>
                {
                    b.HasOne("Repository.Entities.Subject", "Subject")
                        .WithMany("TutorSubjects")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Repository.Entities.Tutor", "Tutor")
                        .WithMany("TutorSubjects")
                        .HasForeignKey("TutorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subject");

                    b.Navigation("Tutor");
                });

            modelBuilder.Entity("Repository.Entities.Wallet", b =>
                {
                    b.HasOne("Repository.Entities.User", "User")
                        .WithOne("Wallet")
                        .HasForeignKey("Repository.Entities.Wallet", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Repository.Entities.AiChatSession", b =>
                {
                    b.Navigation("AiChatMessages");
                });

            modelBuilder.Entity("Repository.Entities.Conversation", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("Repository.Entities.Match", b =>
                {
                    b.Navigation("Conversations");
                });

            modelBuilder.Entity("Repository.Entities.Student", b =>
                {
                    b.Navigation("BookingsAsStudent");

                    b.Navigation("MatchesAsStudent");

                    b.Navigation("Reviews");

                    b.Navigation("SwipeActions");
                });

            modelBuilder.Entity("Repository.Entities.Subject", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("TutorSubjects");
                });

            modelBuilder.Entity("Repository.Entities.Tutor", b =>
                {
                    b.Navigation("BookingsAsTutor");

                    b.Navigation("Certifications");

                    b.Navigation("MatchesAsTutor");

                    b.Navigation("ReviewsReceived");

                    b.Navigation("TutorSubjects");
                });

            modelBuilder.Entity("Repository.Entities.User", b =>
                {
                    b.Navigation("AiChatSessions");

                    b.Navigation("Messages");

                    b.Navigation("Notifications");

                    b.Navigation("PaymentTransactions");

                    b.Navigation("Student");

                    b.Navigation("Tutor");

                    b.Navigation("Wallet");
                });
#pragma warning restore 612, 618
        }
    }
}
